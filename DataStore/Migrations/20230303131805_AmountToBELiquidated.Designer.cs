// <auto-generated />
using System;
using DataStore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataStore.Migrations
{
    [DbContext(typeof(LiquidityDbContext))]
    [Migration("20230303131805_AmountToBELiquidated")]
    partial class AmountToBELiquidated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Models.Entities.ApiKey", b =>
                {
                    b.Property<int>("ApiKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApiKeyId"));

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsSubAccount")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("PassPhrase")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("SubAccountName")
                        .HasColumnType("text");

                    b.HasKey("ApiKeyId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Common.Models.Entities.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BalanceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("CoinId")
                        .HasColumnType("integer");

                    b.Property<int>("ExchangeDetailsId")
                        .HasColumnType("integer");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<int>("SPId")
                        .HasColumnType("integer");

                    b.HasKey("BalanceId");

                    b.HasIndex("CoinId");

                    b.HasIndex("ExchangeDetailsId");

                    b.HasIndex("SPId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Common.Models.Entities.Coin", b =>
                {
                    b.Property<int>("CoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoinId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CoinId");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("Common.Models.Entities.CoinPair", b =>
                {
                    b.Property<int>("CoinPairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoinPairId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PCoinId")
                        .HasColumnType("integer");

                    b.Property<int>("SCoinId")
                        .HasColumnType("integer");

                    b.HasKey("CoinPairId");

                    b.HasIndex("PCoinId");

                    b.HasIndex("SCoinId");

                    b.ToTable("CoinPairs");
                });

            modelBuilder.Entity("Common.Models.Entities.ConfigSetting", b =>
                {
                    b.Property<int>("ConfigSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConfigSettingId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("ConfigSettingId");

                    b.HasIndex("Name");

                    b.ToTable("ConfigSettings");
                });

            modelBuilder.Entity("Common.Models.Entities.ExchangeCoinMappings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoinId")
                        .HasColumnType("integer");

                    b.Property<string>("ExchangeCoinName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("VenueId");

                    b.ToTable("ExchangeCoinMappings");
                });

            modelBuilder.Entity("Common.Models.Entities.ExchangeCoinpairMapping", b =>
                {
                    b.Property<int>("ExchangeCoinpairLookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExchangeCoinpairLookupId"));

                    b.Property<int>("CoinPairId")
                        .HasColumnType("integer");

                    b.Property<string>("ExchangeCoinpairName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("ExchangeCoinpairLookupId");

                    b.HasIndex("CoinPairId");

                    b.HasIndex("VenueId");

                    b.ToTable("ExchangeCoinPairMappings");
                });

            modelBuilder.Entity("Common.Models.Entities.ExchangeDetails", b =>
                {
                    b.Property<int>("ExchangeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExchangeDetailsId"));

                    b.Property<int>("ApiKeyId")
                        .HasColumnType("integer");

                    b.Property<string>("CoinPairs")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OpeningExchangeBalanceId")
                        .HasColumnType("integer");

                    b.Property<int>("SPId")
                        .HasColumnType("integer");

                    b.Property<int>("StrategySPSubscriptionConfigId")
                        .HasColumnType("integer");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("ExchangeDetailsId");

                    b.HasIndex("ApiKeyId");

                    b.HasIndex("OpeningExchangeBalanceId");

                    b.HasIndex("SPId");

                    b.HasIndex("StrategySPSubscriptionConfigId");

                    b.HasIndex("VenueId");

                    b.ToTable("ExchangeDetails");
                });

            modelBuilder.Entity("Common.Models.Entities.FairValueConfigForUI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoinPairId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdateIntervalSecs")
                        .HasColumnType("integer");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoinPairId");

                    b.HasIndex("VenueId");

                    b.ToTable("FairValueConfigForUI");
                });

            modelBuilder.Entity("Common.Models.Entities.Fund", b =>
                {
                    b.Property<int>("FundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FundId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FundName")
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.HasKey("FundId");

                    b.HasIndex("LocationId");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountDecimals")
                        .HasColumnType("integer");

                    b.Property<int>("BatchSize")
                        .HasColumnType("integer");

                    b.Property<int>("CancelTimerInterval")
                        .HasColumnType("integer");

                    b.Property<decimal>("CoinAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("CoinPairId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DailyLiquidationTarget")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LiquidationOrderLoadingConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("LongTimeInterval")
                        .HasColumnType("integer");

                    b.Property<int>("MakerMode")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxOrderSize")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OrderSize")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercentageSpreadFromFV")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercentageSpreadLowerThreshold")
                        .HasColumnType("numeric");

                    b.Property<int>("PriceDecimals")
                        .HasColumnType("integer");

                    b.Property<int>("SPId")
                        .HasColumnType("integer");

                    b.Property<int>("ShortTimeInterval")
                        .HasColumnType("integer");

                    b.Property<bool>("StopOnDailyTargetReached")
                        .HasColumnType("boolean");

                    b.Property<int>("StrategyId")
                        .HasColumnType("integer");

                    b.Property<int>("StrategySPSubscriptionConfigId")
                        .HasColumnType("integer");

                    b.Property<bool>("StrategyState")
                        .HasColumnType("boolean");

                    b.Property<decimal>("SubscriptionPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("TakerModeTimeInterval")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoinPairId");

                    b.HasIndex("LiquidationOrderLoadingConfigurationId");

                    b.HasIndex("SPId");

                    b.HasIndex("StrategyId");

                    b.HasIndex("StrategySPSubscriptionConfigId");

                    b.ToTable("LiquidationConfigurations");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationManualOrderLoading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderNo")
                        .HasColumnType("integer");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric");

                    b.Property<int>("StrategySPSubscriptionConfigId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StrategySPSubscriptionConfigId");

                    b.ToTable("LiquidationManualOrderLoadings");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationOrderLoadingConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighestFirst")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("ScalingFactor")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StartPercentage")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("LiquidationOrderLoadingConfigurations");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationStrategyConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountDecimals")
                        .HasColumnType("integer");

                    b.Property<int>("BatchSize")
                        .HasColumnType("integer");

                    b.Property<int>("CancellationPolicyOnStart")
                        .HasColumnType("integer");

                    b.Property<int>("CoinPairId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LongTimeInterval")
                        .HasColumnType("integer");

                    b.Property<decimal>("NumberOfCoins")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OrderSize")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercentageSpreadFromFV")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercentageSpreadLowerThreshold")
                        .HasColumnType("numeric");

                    b.Property<int>("PriceDecimals")
                        .HasColumnType("integer");

                    b.Property<int>("ShortTimeInterval")
                        .HasColumnType("integer");

                    b.Property<int>("StrategySPSubscriptionConfigId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubscriptionPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<string>("Venue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoinPairId");

                    b.HasIndex("StrategySPSubscriptionConfigId");

                    b.ToTable("LiquidationStrategyConfigs");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationTracker", b =>
                {
                    b.Property<int>("LiquidationTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LiquidationTrackerId"));

                    b.Property<int>("CoinId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CoinQtyLiquidatedInDay")
                        .HasColumnType("numeric");

                    b.Property<int>("CurrentDayNo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DollarQtyForDay")
                        .HasColumnType("numeric");

                    b.Property<int>("NumberOfFillsInDay")
                        .HasColumnType("integer");

                    b.Property<int>("RunId")
                        .HasColumnType("integer");

                    b.Property<int?>("StrategySPSubscriptionConfigId")
                        .HasColumnType("integer");

                    b.Property<int>("StrategySubscriptionConfigId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalCoinQtyLiquidated")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalDaysToRun")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalDollarQtyLiquidated")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalNumberOfFillsIn")
                        .HasColumnType("integer");

                    b.HasKey("LiquidationTrackerId");

                    b.HasIndex("StrategySPSubscriptionConfigId");

                    b.ToTable("LiquidationTrackers");
                });

            modelBuilder.Entity("Common.Models.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Common.Models.Entities.MakerTakerFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MakerPercentage")
                        .HasColumnType("numeric");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<decimal>("TakerPercentage")
                        .HasColumnType("numeric");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("MakerTakerFees");
                });

            modelBuilder.Entity("Common.Models.Entities.OpeningExchangeBalance", b =>
                {
                    b.Property<int>("OpeningExchangeBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OpeningExchangeBalanceId"));

                    b.Property<decimal>("AmountToBeLiquidated")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LiquidatingFromCurrency")
                        .HasColumnType("text");

                    b.Property<decimal>("LiquidatingFromOpeningBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("LiquidatingToCurrency")
                        .HasColumnType("text");

                    b.Property<decimal>("LiquidatingToOpeningBalance")
                        .HasColumnType("numeric");

                    b.HasKey("OpeningExchangeBalanceId");

                    b.ToTable("OpeningExchangeBalances");
                });

            modelBuilder.Entity("Common.Models.Entities.OpeningSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoinId")
                        .HasColumnType("integer");

                    b.Property<decimal>("InitialCoinAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("LiquidationTrackerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProjectedNominal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SubscriptionPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoinId");

                    b.HasIndex("LiquidationTrackerId");

                    b.HasIndex("VenueId");

                    b.ToTable("OpeningSubscription");
                });

            modelBuilder.Entity("Common.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .HasColumnType("text");

                    b.Property<string>("ClientOid")
                        .HasColumnType("text");

                    b.Property<int>("CoinPairId")
                        .HasColumnType("integer");

                    b.Property<decimal>("FilledQuantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Instance")
                        .HasColumnType("text");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RemainingQuantity")
                        .HasColumnType("numeric");

                    b.Property<int>("SPId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoinPairId");

                    b.HasIndex("SPId");

                    b.HasIndex("VenueId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Common.Models.Entities.SP", b =>
                {
                    b.Property<int>("SPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SPId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FundId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SPId");

                    b.HasIndex("FundId");

                    b.ToTable("SPs");
                });

            modelBuilder.Entity("Common.Models.Entities.Strategy", b =>
                {
                    b.Property<int>("StrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StrategyId"));

                    b.Property<string>("StrategyName")
                        .HasColumnType("text");

                    b.HasKey("StrategyId");

                    b.ToTable("Strategies");
                });

            modelBuilder.Entity("Common.Models.Entities.StrategySPSubscriptionConfig", b =>
                {
                    b.Property<int>("StrategySPSubscriptionConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StrategySPSubscriptionConfigId"));

                    b.Property<string>("ConfigName")
                        .HasColumnType("text");

                    b.Property<int>("SPId")
                        .HasColumnType("integer");

                    b.Property<int>("StrategyId")
                        .HasColumnType("integer");

                    b.HasKey("StrategySPSubscriptionConfigId");

                    b.HasIndex("ConfigName")
                        .IsUnique();

                    b.HasIndex("SPId");

                    b.HasIndex("StrategyId");

                    b.ToTable("StrategySPSubscriptionConfigs");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramAlert", b =>
                {
                    b.Property<int>("TelegramAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramAlertId"));

                    b.Property<string>("AlertName")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("TelegramAlertId");

                    b.HasIndex("AlertName")
                        .IsUnique();

                    b.ToTable("TelegramAlerts");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramAlertCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .IsUnique();

                    b.ToTable("TelegramAlertCategories");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramAlertToChannel", b =>
                {
                    b.Property<int>("TelegramAlertToChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramAlertToChannelId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAuthorised")
                        .HasColumnType("boolean");

                    b.Property<int>("TelegramAlertId")
                        .HasColumnType("integer");

                    b.Property<int>("TelegramChannelId")
                        .HasColumnType("integer");

                    b.HasKey("TelegramAlertToChannelId");

                    b.HasIndex("TelegramAlertId");

                    b.HasIndex("TelegramChannelId");

                    b.ToTable("TelegramAlertsToChannels");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramChannel", b =>
                {
                    b.Property<int>("TelegramChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramChannelId"));

                    b.Property<string>("ChannelName")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TelegramAlertCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("TokenId")
                        .HasColumnType("text");

                    b.HasKey("TelegramChannelId");

                    b.HasIndex("ChannelName")
                        .IsUnique();

                    b.ToTable("TelegramChannels");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramCommand", b =>
                {
                    b.Property<int>("TelegramCommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramCommandId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TelegramCommandText")
                        .HasColumnType("text");

                    b.Property<int>("TelegramCommandTypeId")
                        .HasColumnType("integer");

                    b.HasKey("TelegramCommandId");

                    b.HasIndex("TelegramCommandText")
                        .IsUnique();

                    b.HasIndex("TelegramCommandTypeId");

                    b.ToTable("TelegramCommands");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramCommandToUser", b =>
                {
                    b.Property<int>("TelegramCommandToUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramCommandToUserId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAuthorised")
                        .HasColumnType("boolean");

                    b.Property<int>("TelegramCommandId")
                        .HasColumnType("integer");

                    b.Property<int>("TelegramUserId")
                        .HasColumnType("integer");

                    b.HasKey("TelegramCommandToUserId");

                    b.HasIndex("TelegramCommandId");

                    b.HasIndex("TelegramUserId");

                    b.ToTable("TelegramCommandToUsers");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramCommandType", b =>
                {
                    b.Property<int>("TelegramCommandTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramCommandTypeId"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.HasKey("TelegramCommandTypeId");

                    b.ToTable("TelegramCommandTypes");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramSubscriberToChannel", b =>
                {
                    b.Property<int>("TelegramSubscriberToChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TelegramSubscriberToChannelId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAuthorised")
                        .HasColumnType("boolean");

                    b.Property<int>("TelegramChannelId")
                        .HasColumnType("integer");

                    b.Property<int>("TelegramUserId")
                        .HasColumnType("integer");

                    b.HasKey("TelegramSubscriberToChannelId");

                    b.HasIndex("TelegramChannelId");

                    b.HasIndex("TelegramUserId");

                    b.ToTable("TelegramSubscriberToChannels");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("UserToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("Common.Models.Entities.Trade", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TradeId"));

                    b.Property<int>("CoinPairId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExchangeTradeId")
                        .HasColumnType("text");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<string>("InstanceName")
                        .HasColumnType("text");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LeaveQuantity")
                        .HasColumnType("numeric");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("SPId")
                        .HasColumnType("integer");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("TradeId");

                    b.HasIndex("CoinPairId");

                    b.HasIndex("SPId");

                    b.HasIndex("VenueId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("Common.Models.Entities.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VenueId"));

                    b.Property<string>("VenueName")
                        .HasColumnType("text");

                    b.Property<int>("VenueType")
                        .HasColumnType("integer");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Common.Models.Entities.Balance", b =>
                {
                    b.HasOne("Common.Models.Entities.Coin", "Coin")
                        .WithMany()
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.ExchangeDetails", "ExchangeDetails")
                        .WithMany()
                        .HasForeignKey("ExchangeDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.SP", "SP")
                        .WithMany()
                        .HasForeignKey("SPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("ExchangeDetails");

                    b.Navigation("SP");
                });

            modelBuilder.Entity("Common.Models.Entities.CoinPair", b =>
                {
                    b.HasOne("Common.Models.Entities.Coin", "PCoin")
                        .WithMany()
                        .HasForeignKey("PCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Coin", "SCoin")
                        .WithMany()
                        .HasForeignKey("SCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PCoin");

                    b.Navigation("SCoin");
                });

            modelBuilder.Entity("Common.Models.Entities.ExchangeCoinMappings", b =>
                {
                    b.HasOne("Common.Models.Entities.Coin", "Coin")
                        .WithMany()
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Common.Models.Entities.ExchangeCoinpairMapping", b =>
                {
                    b.HasOne("Common.Models.Entities.CoinPair", "CoinPair")
                        .WithMany()
                        .HasForeignKey("CoinPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinPair");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Common.Models.Entities.ExchangeDetails", b =>
                {
                    b.HasOne("Common.Models.Entities.ApiKey", "ApiKey")
                        .WithMany()
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.OpeningExchangeBalance", "OpeningExchangeBalance")
                        .WithMany()
                        .HasForeignKey("OpeningExchangeBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.SP", "SP")
                        .WithMany()
                        .HasForeignKey("SPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.StrategySPSubscriptionConfig", null)
                        .WithMany("ExchangeDetails")
                        .HasForeignKey("StrategySPSubscriptionConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");

                    b.Navigation("OpeningExchangeBalance");

                    b.Navigation("SP");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Common.Models.Entities.FairValueConfigForUI", b =>
                {
                    b.HasOne("Common.Models.Entities.CoinPair", "CoinPair")
                        .WithMany()
                        .HasForeignKey("CoinPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinPair");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Common.Models.Entities.Fund", b =>
                {
                    b.HasOne("Common.Models.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationConfiguration", b =>
                {
                    b.HasOne("Common.Models.Entities.CoinPair", "CoinPair")
                        .WithMany()
                        .HasForeignKey("CoinPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.LiquidationOrderLoadingConfiguration", "LiquidationOrderLoadingConfiguration")
                        .WithMany()
                        .HasForeignKey("LiquidationOrderLoadingConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.SP", "SP")
                        .WithMany()
                        .HasForeignKey("SPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.StrategySPSubscriptionConfig", "StrategySPSubscriptionConfig")
                        .WithMany()
                        .HasForeignKey("StrategySPSubscriptionConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinPair");

                    b.Navigation("LiquidationOrderLoadingConfiguration");

                    b.Navigation("SP");

                    b.Navigation("Strategy");

                    b.Navigation("StrategySPSubscriptionConfig");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationManualOrderLoading", b =>
                {
                    b.HasOne("Common.Models.Entities.StrategySPSubscriptionConfig", "StrategyInstance")
                        .WithMany()
                        .HasForeignKey("StrategySPSubscriptionConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrategyInstance");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationStrategyConfig", b =>
                {
                    b.HasOne("Common.Models.Entities.CoinPair", "CoinPair")
                        .WithMany()
                        .HasForeignKey("CoinPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.StrategySPSubscriptionConfig", "StrategySPSubscriptionConfig")
                        .WithMany()
                        .HasForeignKey("StrategySPSubscriptionConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinPair");

                    b.Navigation("StrategySPSubscriptionConfig");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationTracker", b =>
                {
                    b.HasOne("Common.Models.Entities.StrategySPSubscriptionConfig", "StrategySpSubscriptionConfig")
                        .WithMany()
                        .HasForeignKey("StrategySPSubscriptionConfigId");

                    b.Navigation("StrategySpSubscriptionConfig");
                });

            modelBuilder.Entity("Common.Models.Entities.MakerTakerFee", b =>
                {
                    b.HasOne("Common.Models.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Common.Models.Entities.OpeningSubscription", b =>
                {
                    b.HasOne("Common.Models.Entities.Coin", "Coin")
                        .WithMany()
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.LiquidationTracker", "LiquidationTracker")
                        .WithMany("OpeningSubscriptions")
                        .HasForeignKey("LiquidationTrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("LiquidationTracker");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Common.Models.Entities.Order", b =>
                {
                    b.HasOne("Common.Models.Entities.CoinPair", "CoinPair")
                        .WithMany()
                        .HasForeignKey("CoinPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.SP", "SP")
                        .WithMany()
                        .HasForeignKey("SPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinPair");

                    b.Navigation("SP");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Common.Models.Entities.SP", b =>
                {
                    b.HasOne("Common.Models.Entities.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Common.Models.Entities.StrategySPSubscriptionConfig", b =>
                {
                    b.HasOne("Common.Models.Entities.SP", "SP")
                        .WithMany()
                        .HasForeignKey("SPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SP");

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramAlertToChannel", b =>
                {
                    b.HasOne("Common.Models.Entities.TelegramAlert", "TelegramAlert")
                        .WithMany()
                        .HasForeignKey("TelegramAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.TelegramChannel", "TelegramChannel")
                        .WithMany()
                        .HasForeignKey("TelegramChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramAlert");

                    b.Navigation("TelegramChannel");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramCommand", b =>
                {
                    b.HasOne("Common.Models.Entities.TelegramCommandType", "TelegramCommandType")
                        .WithMany()
                        .HasForeignKey("TelegramCommandTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramCommandType");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramCommandToUser", b =>
                {
                    b.HasOne("Common.Models.Entities.TelegramCommand", "TelegramCommand")
                        .WithMany()
                        .HasForeignKey("TelegramCommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.TelegramUser", "TelegramUser")
                        .WithMany()
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramCommand");

                    b.Navigation("TelegramUser");
                });

            modelBuilder.Entity("Common.Models.Entities.TelegramSubscriberToChannel", b =>
                {
                    b.HasOne("Common.Models.Entities.TelegramChannel", "TelegramChannel")
                        .WithMany()
                        .HasForeignKey("TelegramChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.TelegramUser", "TelegramUser")
                        .WithMany()
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramChannel");

                    b.Navigation("TelegramUser");
                });

            modelBuilder.Entity("Common.Models.Entities.Trade", b =>
                {
                    b.HasOne("Common.Models.Entities.CoinPair", "CoinPair")
                        .WithMany()
                        .HasForeignKey("CoinPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.SP", "SP")
                        .WithMany()
                        .HasForeignKey("SPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.Entities.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinPair");

                    b.Navigation("SP");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Common.Models.Entities.LiquidationTracker", b =>
                {
                    b.Navigation("OpeningSubscriptions");
                });

            modelBuilder.Entity("Common.Models.Entities.StrategySPSubscriptionConfig", b =>
                {
                    b.Navigation("ExchangeDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
