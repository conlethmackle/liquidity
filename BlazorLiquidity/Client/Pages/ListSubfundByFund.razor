@page "/list-subfunds-by-fund/{FundId:int}"
@using BlazorLiquidity.Shared
@using Common.Models.DTOs
@inject PortfolioHttpClient PortfolioHttpClient
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Cards
@using Syncfusion
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using System.Security.Cryptography.X509Certificates
@using System.Linq

@inject NavigationManager NavigationManager
    @if (_portfolios == null)
    {
        <p>Loading ...</p>
    }
    else
    {
        <div id="ControlRegion">
           
            <div class="h2"><h2>@_fund.FundName SubFunds</h2></div>
                
                    
                    <SfGrid ID="Grid" DataSource="@_portfolios" @ref="Grid" AllowSelection="true" AllowResizing="true"
                            Height="@_height.ToString()" Width="600"  >
                    <GridEditSettings AllowEditOnDblClick="true"  AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>

                    <GridPageSettings PageSizes="true"></GridPageSettings>
                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                    <GridEvents OnToolbarClick="ToolbarClick" OnActionBegin="OnActionBegin" OnRecordDoubleClick="OnRecordDoubleClick" TValue="SPDTO"></GridEvents>

                    <GridColumns>
                        <GridColumn Field=@nameof(SPDTO.Name) TextAlign="TextAlign.Left"  HeaderText="Name" ValidationRules="@(new ValidationRules { Required = true })" Width="600"></GridColumn>
                    </GridColumns>
                    </SfGrid>
               
           
        </div>
    }
<style>
    .barred {
        color: white;
    }
   
    background_colour {
        background-color: lightgray;
    }
    body  {
        background-image: url("/images/background.jpg");
        background-color: black;
        color: white;
    }
   
    #Grid.e-grid .e-gridheader .e-columnheader
    { 
        display: none; 
    } 
    .e-card {
        opacity: 1.0;
        
    }


    .CustomHeader, 
    .e-card .e-card-header .e-card-header-caption:first-child { 
        padding-left: 0%;
        align-content: center;
        background-color: black;
        color: gold;
        font-weight: bold;
        font-size: 30px;
    } 

    .e-grid .e-table .e-row .e-rowcell { 
        font-size:26px;
        font-family: cambria;
        font-weight: bolder;
        padding-bottom: 40px;
        padding-top: 40px;
        color: white;
        border-color: black;
        outline-color: black;
        background-color: black;
        
    }

    .e-headercelldiv {
        padding-bottom: 10px;
        padding-top: 10px;
        background-color: black;
    }

    .h2 {
        font-family: cambria;
        font-weight: bolder;
        color: #FFB84C;
        background: black;
        opacity: 0.5;
        font-size: 35px;
        text-align: center;
    }
</style> 

<style>
    .barred {
        color: white;
    }
   
    background_colour {
        background-color: lightgray;
    }
    body  {
        background-image: url("/images/background.jpg");
        background-color: black;
        color: white;
    }
   
    #Grid.e-grid .e-gridheader .e-columnheader
    { 
        display: none; 
    } 
    .e-card {
        opacity: 1.0;
        
    }


    .CustomHeader, 
    .e-card .e-card-header .e-card-header-caption:first-child { 
        padding-left: 0%;
        align-content: center;
        background-color: black;
        color: gold;
        font-weight: bolder;
        font-size: 30px;
    } 

    .e-grid .e-table .e-row .e-rowcell { 
        font-size:26px;
        font-family: cambria;
        font-weight: bolder;
        padding-bottom: 40px;
        padding-top: 40px;
        color: white;
        border-color: black;
        outline-color: black;
        background-color: black;
        opacity: 0.2;
        
    }

    .e-headercelldiv {
        padding-bottom: 10px;
        padding-top: 10px;
        background-color: black;
        opacity: 0.0;
    }

    .h2 {
        font-family: cambria;
        font-weight: bold;
        color: #ffdf00;
        background: black;
        opacity: 0.5;
        font-size: 35px;
        text-align: left;
    }
</style> 

@code {

    [Parameter]
    public int FundId { get; set; }

    private FundDTO _fund { get; set; }
    private List<FundDTO> _funds { get; set; } = new();
    private List<SPDTO> _portfolios { get; set; }
    SfButton SPSelectButton;
    SfGrid<SPDTO>? Grid { get; set; }
    SfButton AddNewButton;
    int _height = 300;

    //public Orientation VerOrientation = Orientation.Vertical;
    // Specify the value of Sidebar component state. It indicates whether the sidebar component is in an open/close state.
    public bool SidebarToggle = false;
    // Specifies the value of Sidebar HTMLAttribute property.
    Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>()
    {
        {"class", "sidebar-menu" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _funds = await PortfolioHttpClient.GetFunds();
            var temp =  _funds.Where(x => x.FundId == FundId);
            if (temp != null && temp.Any())
            {
                _fund = temp.FirstOrDefault();
            }
            Console.WriteLine("Got the reply back from GetFundById");
            _portfolios = await PortfolioHttpClient.GetSubFundsByFundId(FundId);
            _height = 100 * _portfolios.Count + 25;
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error getting Funds - {e.StackTrace}");
        }

    }

    public void OnAddNewInstance(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"create-subfund");
    }


    public void LoadPortfolio(string name)
    {
        NavigationManager.NavigateTo($"portfolio-instance-list/{name}");
    }

    public async Task CreatePortfolio()
    {
        NavigationManager.NavigateTo($"create-portfolio");
    }

    public void PortfolioCreated(object created)
    {
        var data = (SPDTO)created;

        Console.WriteLine($"In PortfolioCreated with name {data.Name}");
    }

    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        Console.WriteLine("In toolbarclick");
    }

    public void OnRecordDoubleClick(Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs<SPDTO> args)
    {
        NavigationManager.NavigateTo($"portfolio-instance-list/{args.RowData.Name}");
    }

    public async Task OnActionBegin(ActionEventArgs<SPDTO> args)
    {
        try
        {

        
            if (args == null)
            {
           
                return;
            }
            if (args.Data == null || args.Action == null || args.RequestType == null)
            {
            
                return;
            }
           
      
            if (args.RequestType.Equals((Syncfusion.Blazor.Grids.Action.Save)))
            {
                if (args.Action == "Add")
                {
                    await PortfolioHttpClient.CreatePortfolio(args.Data);
                }
                else if (args.Action == "Edit")
                {
                    var res = await PortfolioHttpClient.UpdatePortfolio(args.Data);
                
                }
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
       
                if (args.Action == "Delete")
                {
                    await PortfolioHttpClient.DeletePortfolio(args.Data);
                }
            }
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
            {
                if (args.Action == "Add")
                {
                    await PortfolioHttpClient.CreatePortfolio(args.Data);
                }
            }
            _portfolios = await PortfolioHttpClient.GetPortfolios();
            await Grid?.CloseEditAsync();
            await Grid?.RefreshColumnsAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    public async Task OnActionComplete(ActionEventArgs<SPDTO> args)
    {
       Console.WriteLine($"OnActionComplete Just had an {args.Action} action on Id = {args.Data.Name}");
        _portfolios = await PortfolioHttpClient.GetPortfolios();
        await Grid?.Refresh();
    }
}
