@page "/list-opening-balances"
@attribute [Authorize]
@using BlazorLiquidity.Shared
@using Common.Models.DTOs
@inject PortfolioHttpClient PortfolioHttpClient
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Action = Syncfusion.Blazor.Grids.Action
@inject NavigationManager NavigationManager


@if (_openingBalances == null)
{
    <p>Loading ...</p>
}
else {
    

    <br/>
    <div id="ControlRegion">

        <SfCard Orientation="CardOrientation.Vertical">
            <CardHeader>
                <div class="CustomHeader">Opening Exchange Balances</div></CardHeader>

           
            <SfGrid ID="Grid" DataSource="@_openingBalances" @ref="Grid" AllowSelection="true" AllowResizing="true"
                    Toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update" })" Height="315" Width="1500">
                <GridEditSettings AllowEditOnDblClick="true" AllowAdding="true" AllowEditing="true" AllowDeleting="true" ShowConfirmDialog="true" Mode="EditMode.Dialog"></GridEditSettings>
                <GridPageSettings PageSizes="true"></GridPageSettings>
                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>

                <GridPageSettings PageSizes="true"></GridPageSettings>
                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                <GridEvents OnActionBegin="OnActionBegin" OnActionFailure="ActionFailureHandler" TValue="OpeningExchangeBalanceDTO"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(OpeningExchangeBalanceDTO.OpeningExchangeBalanceId) HeaderText="Id" ValidationRules="@(new ValidationRules { Required = false })" AllowAdding="false" AllowEditing="false"  Width="50"></GridColumn>
                    <GridColumn Field=@nameof(OpeningExchangeBalanceDTO.Description) HeaderText="Description" ValidationRules="@(new ValidationRules { Required = true })" Width="300"></GridColumn>
                    <GridColumn Field=@nameof(OpeningExchangeBalanceDTO.LiquidatingFromCurrency) HeaderText="Liquidated From" ValidationRules="@(new ValidationRules { Required = true })" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OpeningExchangeBalanceDTO.AmountToBeLiquidated) HeaderText="Total to Liquidate" ValidationRules="@(new ValidationRules { Required = true })" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(OpeningExchangeBalanceDTO.LiquidatingFromOpeningBalance) HeaderText="Opening Available Balance" ValidationRules="@(new ValidationRules { Required = true })" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(OpeningExchangeBalanceDTO.LiquidatingToCurrency) HeaderText="Liquidated To" ValidationRules="@(new ValidationRules { Required = true })" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(OpeningExchangeBalanceDTO.LiquidatingToOpeningBalance) HeaderText="Liquidated to Opening Balance" ValidationRules="@(new ValidationRules { Required = false })" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OpeningExchangeBalanceDTO.Created) HeaderText="Date Created" ValidationRules="@(new ValidationRules { Required = false })" AllowEditing="false"  Width="150"></GridColumn>
                    <GridColumn HeaderText="Manage" Width="100" HeaderTextAlign="TextAlign.Right">
                        <GridCommandColumns>

                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-save", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>

        </SfCard>
    </div>
}

<style  type="text/css" class="cssStyles"> 
   
    .e-grid .e-altrow {
                                         background-color: #aaaaaa;
                                     }
    .CustomHeader, 
    .e-card .e-card-header .e-card-header-caption:first-child { 
        padding-left: 0%; 
        
    } 

 
    .lower {
        background-color: red;
    }

    .higher {
        background-color: green;
    }

    .same {
        background-color: orange
    }

    .e-grid .e-headercell { 
        background-color: #36486b; 
    } 
  
    .e-headercell {         
        color: white;
        background-color: black;
        
        font-size: 40px;
        font-weight: bold; 
    }

    .e-grid .e-rowcell {
        font-size: 26px;
        padding-bottom: 3px;
        padding-top: 3px;
    }

    .e-headercelldiv {
        font-size: 40px;
        font-weight: bold;
        padding-bottom: 6px;
        padding-top: 6px;
        background-color: black;
    }
    
    .e-custom {
        border-radius: 0;
        height: 30px;
        width: 80px;
    }

    .e-custom, .e-custom:hover, .e-custom:focus, .e-custom:active {
        background-color: #ff6e40;
        color: #fff;
        font-size: 1.0rem; 
        font-weight: bold;
    }

</style>


@code {
    List<OpeningExchangeBalanceDTO> _openingBalances { get; set; }
    SfGrid<OpeningExchangeBalanceDTO>? Grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    public async Task OnActionBegin(ActionEventArgs<OpeningExchangeBalanceDTO> args)
    {
        if (args == null)
        {
            Console.WriteLine("OnActionBegin args is null");
            return;
        }
        if (args.Data == null)
        {
            Console.WriteLine("OnActionBegin args.Data is null");
            return;
        }
  
        if (args.RequestType.Equals((Syncfusion.Blazor.Grids.Action.Save)))
        {
            if (args.Action == "Add")
            {
                args.Data.Created = DateTime.UtcNow;
                await PortfolioHttpClient.CreateExchangeOpeningBalance(args.Data);
            }
            else if (args.Action == "Edit")
            {
                Console.WriteLine("Got an edit");
                await PortfolioHttpClient.UpdateOpeningExchangeBalance(args.Data);
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            if (args.Action == "Delete")
            {
                await PortfolioHttpClient.DeleteOpeningExchangeBalance(args.Data.OpeningExchangeBalanceId);
            }
        }
       
        else if (args.RequestType == Action.Cancel)
        {
            Console.WriteLine("Cancel captured");
            return;
        }

        await RefreshData();
        await Grid?.Refresh();
    }

    public void ActionFailureHandler(FailureEventArgs args)
    {
        Console.WriteLine($"ActionFailureHandler called {args.Error.Message}");
    }

    public void OnAddNewInstance(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("add-liquidation-strategy-config");
    }

    private async Task RefreshData()
    {
        _openingBalances = await PortfolioHttpClient.GetOpeningExchangeBalances();
       
    }
}
