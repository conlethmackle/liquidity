@page "/list-telegram-command-types"
@attribute [Authorize]
@using BlazorLiquidity.Shared
@using Common.Models.DTOs
@inject PortfolioHttpClient PortfolioHttpClient
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@inject NavigationManager NavigationManager


@if (_commandTypes == null)
{
    <p>Loading ...</p>
}
else {
    <h2 style="color:white">Telegram Command Types</h2>

    <br/>
    <div id="ControlRegion">
    <SfCard Orientation="CardOrientation.Vertical">
        <CardHeader><div class="CustomHeader">Telegram Command Types</div></CardHeader>
              
       
        <SfGrid ID="Grid" DataSource="@_commandTypes" @ref="Grid" AllowSelection="true"
                Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update"})" Height="315" Width="900">
            <GridEditSettings AllowEditOnDblClick="true" AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
            <GridPageSettings PageSizes="true"></GridPageSettings>
            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
          
            <GridPageSettings PageSizes="true"></GridPageSettings>
            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridEvents  OnActionBegin="OnActionBegin"  TValue="TelegramCommandTypeDTO"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(TelegramCommandTypeDTO.TelegramCommandTypeId) HeaderText="Id" AllowEditing="false" ValidationRules="@(new ValidationRules { Required = true })" Width="150"></GridColumn>
                <GridColumn Field=@nameof(TelegramCommandTypeDTO.Category) HeaderText="Command Type Category" ValidationRules="@(new ValidationRules { Required = true })" Width="150"></GridColumn>
                <GridColumn HeaderText="Manage" Width="100" HeaderTextAlign="TextAlign.Right">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-save", CssClass = "e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel", CssClass = "e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
                
    </SfCard>
    </div>
}



@code {
    List<TelegramCommandTypeDTO> _commandTypes { get; set; }
    SfGrid<TelegramCommandTypeDTO>? Grid { get; set; }
    SfButton AddNewButton;
    protected override async Task OnInitializedAsync()
    {
        _commandTypes = await PortfolioHttpClient.GetTelegramCommandTypes();
    }

    public async Task OnActionBegin(ActionEventArgs<TelegramCommandTypeDTO> args)
    {
        if (args == null)
        {
            Console.WriteLine("OnActionBegin args is null");
            return;
        }
        if (args.Data == null)
        {
            Console.WriteLine("OnActionBegin args.Data is null");
            return;
        }
  
        if (args.RequestType.Equals((Syncfusion.Blazor.Grids.Action.Save)))
        {
            if (args.Action == "Add")
            {
               await PortfolioHttpClient.CreateTelegramCommandType(args.Data);
            }
            else if (args.Action == "Edit")
            {
                Console.WriteLine("Got an edit");
                await PortfolioHttpClient.UpdateTelegramCommandType(args.Data);
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            if (args.Action == "Delete")
            {
                await PortfolioHttpClient.DeleteTelegramCommandType(args.Data.TelegramCommandTypeId);
            }
        }

        _commandTypes = await PortfolioHttpClient.GetTelegramCommandTypes();
        await Grid?.Refresh();
    }
}

