@page "/list-telegram-alert-behaviours"
@attribute [Authorize]
@using BlazorLiquidity.Shared
@using Common.Models.DTOs
@inject PortfolioHttpClient PortfolioHttpClient
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@inject NavigationManager NavigationManager


@if (_alertBehaviours == null)
{
    <p>Loading ...</p>
}
else {
    <div id="ControlRegion">
    <SfCard Orientation="CardOrientation.Vertical">
        <CardHeader><div class="CustomHeader">Telegram Alert Behaviours</div></CardHeader>
              
        <SfButton @ref="AddNewButton" @onclick="OnAddNewInstance" CssClass="e-flat"  IsPrimary="true" Content="Add New Alert"></SfButton>
        <SfGrid ID="Grid" DataSource="@_alertBehaviours" @ref="Grid" AllowSelection="true"
                Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update"})" Height="315" Width="900">
            <GridEditSettings AllowEditOnDblClick="true" AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
            <GridPageSettings PageSizes="true"></GridPageSettings>
            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
          
            <GridPageSettings PageSizes="true"></GridPageSettings>
            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridEvents  OnActionBegin="OnActionBegin"  TValue="TelegramAlertBehaviourDTO"></GridEvents>
            <GridColumns>
                <GridColumn Field="TelegramAlert.AlertName" HeaderText="Alert Name" ValidationRules="@(new ValidationRules { Required = true })" Width="150"></GridColumn>
                <GridColumn Field="TelegramAlertBehaviourType.Name" HeaderText="Behaviour Name" ValidationRules="@(new ValidationRules { Required = true })" Width="150"></GridColumn>
                <GridColumn Field=@nameof(TelegramAlertBehaviourDTO.TimeSpan) HeaderText="Time Span (secs)" ValidationRules="@(new ValidationRules { Required = true })" Width="150"></GridColumn>
                <GridColumn HeaderText="Manage" Width="100" HeaderTextAlign="TextAlign.Right">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-save", CssClass = "e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel", CssClass = "e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
                
    </SfCard>
    </div>
}


@code {
    List<TelegramAlertBehaviourDTO> _alertBehaviours { get; set; } = new();
    SfGrid<TelegramAlertBehaviourDTO>? Grid { get; set; }
    SfButton AddNewButton;
    protected override async Task OnInitializedAsync()
    {
        _alertBehaviours = await PortfolioHttpClient.GetTelegramAlertBehaviours();
    }

    public async Task OnActionBegin(ActionEventArgs<TelegramAlertBehaviourDTO> args)
    {
        if (args == null)
        {
            Console.WriteLine("OnActionBegin args is null");
            return;
        }
        if (args.Data == null)
        {
            Console.WriteLine("OnActionBegin args.Data is null");
            return;
        }
  
        if (args.RequestType.Equals((Syncfusion.Blazor.Grids.Action.Save)))
        {
            if (args.Action == "Edit")
            {
                Console.WriteLine("Got an edit");
                await PortfolioHttpClient.UpdateTelegramAlertBehaviour(args.Data);
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            if (args.Action == "Delete")
            {
                await PortfolioHttpClient.DeleteTelegramAlertBehaviour(args.Data.TelegramAlertId);
            }
        }

        _alertBehaviours.Clear();
        _alertBehaviours = await PortfolioHttpClient.GetTelegramAlertBehaviours();
        await Grid?.Refresh();
    }

    public void OnAddNewInstance(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"create-telegram-alert-behaviour");
    }
}

